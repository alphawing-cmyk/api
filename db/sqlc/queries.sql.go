// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const checkUserExists = `-- name: CheckUserExists :one
SELECT EXISTS (
  SELECT 1 FROM users
  WHERE username = $1
     OR email = $2
)
`

type CheckUserExistsParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) CheckUserExists(ctx context.Context, arg CheckUserExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserExists, arg.Username, arg.Email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const countKv = `-- name: CountKv :one
SELECT 
  count(*) as num_records
FROM kv
`

func (q *Queries) CountKv(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countKv)
	var num_records int64
	err := row.Scan(&num_records)
	return num_records, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  first_name,
  last_name,
  email,
  company,
  password,
  is_active,
  role
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, username, first_name, last_name, email, company, is_active, role
`

type CreateUserParams struct {
	Username  string         `json:"username"`
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	Email     string         `json:"email"`
	Company   sql.NullString `json:"company"`
	Password  string         `json:"password"`
	IsActive  sql.NullBool   `json:"is_active"`
	Role      Role           `json:"role"`
}

type CreateUserRow struct {
	ID        int32          `json:"id"`
	Username  string         `json:"username"`
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	Email     string         `json:"email"`
	Company   sql.NullString `json:"company"`
	IsActive  sql.NullBool   `json:"is_active"`
	Role      Role           `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Company,
		arg.Password,
		arg.IsActive,
		arg.Role,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Company,
		&i.IsActive,
		&i.Role,
	)
	return i, err
}

const deleteKvById = `-- name: DeleteKvById :exec
DELETE FROM kv
WHERE id = $1
`

func (q *Queries) DeleteKvById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteKvById, id)
	return err
}

const getAllServices = `-- name: GetAllServices :many
SELECT id, username, first_name, last_name, email, company, password, is_active, role, img_path, refresh_token, forgot_token FROM users
WHERE service = 'SERVICE'
`

func (q *Queries) GetAllServices(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Company,
			&i.Password,
			&i.IsActive,
			&i.Role,
			&i.ImgPath,
			&i.RefreshToken,
			&i.ForgotToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExchanges = `-- name: GetExchanges :many
SELECT id, acronym, asset_class, name, type, url FROM "exchanges"
`

func (q *Queries) GetExchanges(ctx context.Context) ([]Exchange, error) {
	rows, err := q.db.QueryContext(ctx, getExchanges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exchange
	for rows.Next() {
		var i Exchange
		if err := rows.Scan(
			&i.ID,
			&i.Acronym,
			&i.AssetClass,
			&i.Name,
			&i.Type,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKvById = `-- name: GetKvById :one
SELECT id, key, value, user_id FROM kv
WHERE id = $1
`

func (q *Queries) GetKvById(ctx context.Context, id int64) (Kv, error) {
	row := q.db.QueryRowContext(ctx, getKvById, id)
	var i Kv
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.UserID,
	)
	return i, err
}

const getKvByUser = `-- name: GetKvByUser :many
SELECT id, key, value, user_id FROM kv
WHERE user_id = $1
`

func (q *Queries) GetKvByUser(ctx context.Context, userID int64) ([]Kv, error) {
	rows, err := q.db.QueryContext(ctx, getKvByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Kv
	for rows.Next() {
		var i Kv
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Value,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedKv = `-- name: GetPaginatedKv :many
SELECT 
  id,
  key,
  value,
  user_id
FROM kv
ORDER BY id
LIMIT $1 
OFFSET $2
`

type GetPaginatedKvParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPaginatedKv(ctx context.Context, arg GetPaginatedKvParams) ([]Kv, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedKv, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Kv
	for rows.Next() {
		var i Kv
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Value,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoles = `-- name: GetRoles :many
SELECT e.enumlabel AS role
FROM pg_catalog.pg_type t
JOIN pg_catalog.pg_enum e ON t.oid = e.enumtypid
WHERE t.typname = 'Role'
`

func (q *Queries) GetRoles(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var role string
		if err := rows.Scan(&role); err != nil {
			return nil, err
		}
		items = append(items, role)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, first_name, last_name, email, company, password, is_active, role, img_path, refresh_token, forgot_token FROM USERS
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Company,
		&i.Password,
		&i.IsActive,
		&i.Role,
		&i.ImgPath,
		&i.RefreshToken,
		&i.ForgotToken,
	)
	return i, err
}

const getUserByForgotToken = `-- name: GetUserByForgotToken :one
SELECT id, username, first_name, last_name, email, company, password, is_active, role, img_path, refresh_token, forgot_token FROM USERS
WHERE forgot_token = $1
`

func (q *Queries) GetUserByForgotToken(ctx context.Context, forgotToken sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByForgotToken, forgotToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Company,
		&i.Password,
		&i.IsActive,
		&i.Role,
		&i.ImgPath,
		&i.RefreshToken,
		&i.ForgotToken,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, first_name, last_name, email, company, password, is_active, role, img_path, refresh_token, forgot_token FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Company,
		&i.Password,
		&i.IsActive,
		&i.Role,
		&i.ImgPath,
		&i.RefreshToken,
		&i.ForgotToken,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, first_name, last_name, email, company, password, is_active, role, img_path, refresh_token, forgot_token FROM USERS
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Company,
		&i.Password,
		&i.IsActive,
		&i.Role,
		&i.ImgPath,
		&i.RefreshToken,
		&i.ForgotToken,
	)
	return i, err
}

const insertKv = `-- name: InsertKv :exec
INSERT INTO kv (
  key, value,user_id
) VALUES (
  $1, $2, $3
)
RETURNING id, key, value, user_id
`

type InsertKvParams struct {
	Key    string `json:"key"`
	Value  string `json:"value"`
	UserID int64  `json:"user_id"`
}

func (q *Queries) InsertKv(ctx context.Context, arg InsertKvParams) error {
	_, err := q.db.ExecContext(ctx, insertKv, arg.Key, arg.Value, arg.UserID)
	return err
}

const updateForgotToken = `-- name: UpdateForgotToken :exec
UPDATE users
SET forgot_token = $1
WHERE id = $2
`

type UpdateForgotTokenParams struct {
	ForgotToken sql.NullString `json:"forgot_token"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateForgotToken(ctx context.Context, arg UpdateForgotTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateForgotToken, arg.ForgotToken, arg.ID)
	return err
}

const updateKv = `-- name: UpdateKv :exec
UPDATE kv
SET
    key = $2,
    value = $3,
    user_id = $4
WHERE id = $1
`

type UpdateKvParams struct {
	ID     int64  `json:"id"`
	Key    string `json:"key"`
	Value  string `json:"value"`
	UserID int64  `json:"user_id"`
}

func (q *Queries) UpdateKv(ctx context.Context, arg UpdateKvParams) error {
	_, err := q.db.ExecContext(ctx, updateKv,
		arg.ID,
		arg.Key,
		arg.Value,
		arg.UserID,
	)
	return err
}

const updatePasswordByToken = `-- name: UpdatePasswordByToken :exec
UPDATE users
SET password = $1,
    forgot_token = NULL
WHERE forgot_token = $2
`

type UpdatePasswordByTokenParams struct {
	Password    string         `json:"password"`
	ForgotToken sql.NullString `json:"forgot_token"`
}

func (q *Queries) UpdatePasswordByToken(ctx context.Context, arg UpdatePasswordByTokenParams) error {
	_, err := q.db.ExecContext(ctx, updatePasswordByToken, arg.Password, arg.ForgotToken)
	return err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :exec
UPDATE users
SET refresh_token = $1
WHERE id = $2
`

type UpdateRefreshTokenParams struct {
	RefreshToken sql.NullString `json:"refresh_token"`
	ID           int32          `json:"id"`
}

func (q *Queries) UpdateRefreshToken(ctx context.Context, arg UpdateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateRefreshToken, arg.RefreshToken, arg.ID)
	return err
}
