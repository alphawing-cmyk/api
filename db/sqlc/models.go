// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/sqlc-dev/pqtype"
)

type AccountType string

const (
	AccountTypeServiceAccount AccountType = "service_account"
	AccountTypeLiveAccount    AccountType = "live_account"
	AccountTypePaperAccount   AccountType = "paper_account"
)

func (e *AccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountType(s)
	case string:
		*e = AccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountType: %T", src)
	}
	return nil
}

type NullAccountType struct {
	AccountType AccountType `json:"AccountType"`
	Valid       bool        `json:"valid"` // Valid is true if AccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountType), nil
}

type ApiStatusType string

const (
	ApiStatusTypeActive   ApiStatusType = "active"
	ApiStatusTypeDisabled ApiStatusType = "disabled"
)

func (e *ApiStatusType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApiStatusType(s)
	case string:
		*e = ApiStatusType(s)
	default:
		return fmt.Errorf("unsupported scan type for ApiStatusType: %T", src)
	}
	return nil
}

type NullApiStatusType struct {
	ApiStatusType ApiStatusType `json:"ApiStatusType"`
	Valid         bool          `json:"valid"` // Valid is true if ApiStatusType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApiStatusType) Scan(value interface{}) error {
	if value == nil {
		ns.ApiStatusType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApiStatusType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApiStatusType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApiStatusType), nil
}

type Broker string

const (
	BrokerTradestation       Broker = "tradestation"
	BrokerAlpaca             Broker = "alpaca"
	BrokerKraken             Broker = "kraken"
	BrokerCoinbase           Broker = "coinbase"
	BrokerInteractiveBrokers Broker = "interactive_brokers"
	BrokerOanda              Broker = "oanda"
)

func (e *Broker) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Broker(s)
	case string:
		*e = Broker(s)
	default:
		return fmt.Errorf("unsupported scan type for Broker: %T", src)
	}
	return nil
}

type NullBroker struct {
	Broker Broker `json:"Broker"`
	Valid  bool   `json:"valid"` // Valid is true if Broker is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBroker) Scan(value interface{}) error {
	if value == nil {
		ns.Broker, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Broker.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBroker) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Broker), nil
}

type Role string

const (
	RoleDemo    Role = "demo"
	RoleClient  Role = "client"
	RoleAdmin   Role = "admin"
	RoleService Role = "service"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type NullRole struct {
	Role  Role `json:"Role"`
	Valid bool `json:"valid"` // Valid is true if Role is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRole) Scan(value interface{}) error {
	if value == nil {
		ns.Role, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Role.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Role), nil
}

type Account struct {
	ID             int32          `json:"id"`
	UserID         int32          `json:"user_id"`
	AccountNum     string         `json:"account_num"`
	Nickname       sql.NullString `json:"nickname"`
	Broker         Broker         `json:"broker"`
	DateOpened     sql.NullTime   `json:"date_opened"`
	InitialBalance sql.NullString `json:"initial_balance"`
	CurrentBalance sql.NullString `json:"current_balance"`
	AccountType    AccountType    `json:"account_type"`
	AutoTrade      sql.NullBool   `json:"auto_trade"`
}

type Api struct {
	ID           int32             `json:"id"`
	UserID       int32             `json:"user_id"`
	Platform     Broker            `json:"platform"`
	ServiceLevel AccountType       `json:"service_level"`
	ApiKey       sql.NullString    `json:"api_key"`
	Secret       sql.NullString    `json:"secret"`
	AccessToken  sql.NullString    `json:"access_token"`
	RefreshToken sql.NullString    `json:"refresh_token"`
	Expiration   sql.NullTime      `json:"expiration"`
	State        sql.NullString    `json:"state"`
	Scope        sql.NullString    `json:"scope"`
	Status       NullApiStatusType `json:"status"`
	Nickname     sql.NullString    `json:"nickname"`
}

type Exchange struct {
	ID         int32          `json:"id"`
	Acronym    sql.NullString `json:"acronym"`
	AssetClass sql.NullString `json:"asset_class"`
	Name       sql.NullString `json:"name"`
	Type       sql.NullString `json:"type"`
	Url        sql.NullString `json:"url"`
}

type Historical struct {
	ID           int32          `json:"id"`
	CustomID     string         `json:"custom_id"`
	Symbol       string         `json:"symbol"`
	Milliseconds sql.NullInt64  `json:"milliseconds"`
	Duration     sql.NullString `json:"duration"`
	Open         string         `json:"open"`
	Low          string         `json:"low"`
	High         string         `json:"high"`
	Close        string         `json:"close"`
	AdjClose     sql.NullString `json:"adj_close"`
	Volume       sql.NullString `json:"volume"`
	Vwap         sql.NullString `json:"vwap"`
	Timestamp    time.Time      `json:"timestamp"`
	Transactions sql.NullInt32  `json:"transactions"`
	Source       string         `json:"source"`
	Market       string         `json:"market"`
}

type Holiday struct {
	ID       int32          `json:"id"`
	Date     time.Time      `json:"date"`
	Exchange sql.NullString `json:"exchange"`
	Name     sql.NullString `json:"name"`
	Status   sql.NullString `json:"status"`
}

type Kv struct {
	ID     int64  `json:"id"`
	Key    string `json:"key"`
	Value  string `json:"value"`
	UserID int64  `json:"user_id"`
}

type Permission struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

type Review struct {
	ID          int32        `json:"id"`
	FirstName   string       `json:"first_name"`
	LastName    string       `json:"last_name"`
	Message     string       `json:"message"`
	Rating      int32        `json:"rating"`
	UserID      int32        `json:"user_id"`
	DateCreated sql.NullTime `json:"date_created"`
}

type Ticker struct {
	ID        int32                 `json:"id"`
	Symbol    string                `json:"symbol"`
	Name      string                `json:"name"`
	AltNames  pqtype.NullRawMessage `json:"alt_names"`
	Industry  sql.NullString        `json:"industry"`
	Market    string                `json:"market"`
	MarketCap sql.NullString        `json:"market_cap"`
}

type User struct {
	ID           int32          `json:"id"`
	Username     string         `json:"username"`
	FirstName    string         `json:"first_name"`
	LastName     string         `json:"last_name"`
	Email        string         `json:"email"`
	Company      sql.NullString `json:"company"`
	Password     string         `json:"password"`
	IsActive     sql.NullBool   `json:"is_active"`
	Role         Role           `json:"role"`
	ImgPath      sql.NullString `json:"img_path"`
	RefreshToken sql.NullString `json:"refresh_token"`
	ForgotToken  sql.NullString `json:"forgot_token"`
}

type UserPermission struct {
	UserID       int32     `json:"user_id"`
	PermissionID int32     `json:"permission_id"`
	GrantedAt    time.Time `json:"granted_at"`
}
