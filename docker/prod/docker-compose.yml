services:
  nginx:
    image: jonasal/nginx-certbot:latest
    restart: unless-stopped
    environment:
      - CERTBOT_EMAIL=alphawing.tech@gmail.com
    depends_on:
      - vault
      - ui
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
    volumes:
      - nginx_secrets:/etc/letsencrypt
      - ./nginx:/etc/nginx/user_conf.d

  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    command: >
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/ssl/server.crt
      -c ssl_key_file=/var/lib/postgresql/ssl/server.key

  rabbitmq:
    image: rabbitmq:4.0.4-management-alpine
    container_name: rabbitmq
    ports:
      - "5673:5672"
      - "15673:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  vault:
    build:
      context: ../../vault
      dockerfile: Dockerfile.prod
    ports:
      - "8100:8100"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  ui:
    build:
      context: ../../UI/remix
      dockerfile: Dockerfile.prod
    container_name: ui
    ports:
      - "3000:3000"
    networks:
      - app-network

volumes:
  postgres_data:
  rabbitmq_data:
  rabbitmq_logs:
  nginx_secrets:

networks:
  app-network:
    driver: bridge
